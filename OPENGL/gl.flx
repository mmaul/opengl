//Module        : GL_gl_h
//Timestamp     : 2006/1/23 15:46:10 UTC
//Timestamp     : 2006/1/24 2:46:10 (local)
//Raw Header    : /usr/include/GL/gl.h
//Preprocessor  : gcc -E
//Input file: gl.flxcc.i
//Flxcc Control : gl.flxcc
//Felix Version : 1.1.2_rc1

//INCLUDES
include "OPENGL/glext";

class GL
{
  requires package "opengl-gl";
  open C_hack;
  open GLEXT;

  const GL_ALPHA_BLEND_EQUATION_ATI : uint;
  const GL_ATI_blend_equation_separate : uint;
  const GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA : uint;
  const GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA : uint;
  const GL_VERTEX_PROGRAM_CALLBACK_MESA : uint;
  const GL_VERTEX_PROGRAM_POSITION_MESA : uint;
  const GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA : uint;
  const GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA : uint;
  const GL_FRAGMENT_PROGRAM_CALLBACK_MESA : uint;
  const GL_FRAGMENT_PROGRAM_POSITION_MESA : uint;
  const GL_MESA_program_debug : uint;
  const GL_UNSIGNED_SHORT_1_15_REV_MESA : uint;
  const GL_UNSIGNED_SHORT_15_1_MESA : uint;
  const GL_UNSIGNED_INT_8_24_REV_MESA : uint;
  const GL_UNSIGNED_INT_24_8_MESA : uint;
  const GL_DEPTH_STENCIL_MESA : uint;
  const GL_MESA_packed_depth_stencil : uint;
  const GL_TRACE_NAME_MESA : uint;
  const GL_TRACE_MASK_MESA : uint;
  const GL_TRACE_ERRORS_BIT_MESA : uint;
  const GL_TRACE_PIXELS_BIT_MESA : uint;
  const GL_TRACE_TEXTURES_BIT_MESA : uint;
  const GL_TRACE_ARRAYS_BIT_MESA : uint;
  const GL_TRACE_PRIMITIVES_BIT_MESA : uint;
  const GL_TRACE_OPERATIONS_BIT_MESA : uint;
  const GL_TRACE_ALL_BITS_MESA : uint;
  const GL_MESA_trace : uint;
  const GL_MAX_TEXTURE_UNITS_ARB : uint;
  const GL_CLIENT_ACTIVE_TEXTURE_ARB : uint;
  const GL_ACTIVE_TEXTURE_ARB : uint;
  const GL_TEXTURE31_ARB : uint;
  const GL_TEXTURE30_ARB : uint;
  const GL_TEXTURE29_ARB : uint;
  const GL_TEXTURE28_ARB : uint;
  const GL_TEXTURE27_ARB : uint;
  const GL_TEXTURE26_ARB : uint;
  const GL_TEXTURE25_ARB : uint;
  const GL_TEXTURE24_ARB : uint;
  const GL_TEXTURE23_ARB : uint;
  const GL_TEXTURE22_ARB : uint;
  const GL_TEXTURE21_ARB : uint;
  const GL_TEXTURE20_ARB : uint;
  const GL_TEXTURE19_ARB : uint;
  const GL_TEXTURE18_ARB : uint;
  const GL_TEXTURE17_ARB : uint;
  const GL_TEXTURE16_ARB : uint;
  const GL_TEXTURE15_ARB : uint;
  const GL_TEXTURE14_ARB : uint;
  const GL_TEXTURE13_ARB : uint;
  const GL_TEXTURE12_ARB : uint;
  const GL_TEXTURE11_ARB : uint;
  const GL_TEXTURE10_ARB : uint;
  const GL_TEXTURE9_ARB : uint;
  const GL_TEXTURE8_ARB : uint;
  const GL_TEXTURE7_ARB : uint;
  const GL_TEXTURE6_ARB : uint;
  const GL_TEXTURE5_ARB : uint;
  const GL_TEXTURE4_ARB : uint;
  const GL_TEXTURE3_ARB : uint;
  const GL_TEXTURE2_ARB : uint;
  const GL_TEXTURE1_ARB : uint;
  const GL_TEXTURE0_ARB : uint;
  const GL_ARB_multitexture : uint;
  const GL_CLAMP_TO_BORDER : uint;
  const GL_DOT3_RGBA : uint;
  const GL_DOT3_RGB : uint;
  const GL_PREVIOUS : uint;
  const GL_PRIMARY_COLOR : uint;
  const GL_CONSTANT : uint;
  const GL_SUBTRACT : uint;
  const GL_INTERPOLATE : uint;
  const GL_ADD_SIGNED : uint;
  const GL_RGB_SCALE : uint;
  const GL_OPERAND2_ALPHA : uint;
  const GL_OPERAND1_ALPHA : uint;
  const GL_OPERAND0_ALPHA : uint;
  const GL_OPERAND2_RGB : uint;
  const GL_OPERAND1_RGB : uint;
  const GL_OPERAND0_RGB : uint;
  const GL_SOURCE2_ALPHA : uint;
  const GL_SOURCE1_ALPHA : uint;
  const GL_SOURCE0_ALPHA : uint;
  const GL_SOURCE2_RGB : uint;
  const GL_SOURCE1_RGB : uint;
  const GL_SOURCE0_RGB : uint;
  const GL_COMBINE_ALPHA : uint;
  const GL_COMBINE_RGB : uint;
  const GL_COMBINE : uint;
  const GL_TRANSPOSE_COLOR_MATRIX : uint;
  const GL_TRANSPOSE_TEXTURE_MATRIX : uint;
  const GL_TRANSPOSE_PROJECTION_MATRIX : uint;
  const GL_TRANSPOSE_MODELVIEW_MATRIX : uint;
  const GL_MULTISAMPLE_BIT : uint;
  const GL_SAMPLE_COVERAGE_INVERT : uint;
  const GL_SAMPLE_COVERAGE_VALUE : uint;
  const GL_SAMPLES : uint;
  const GL_SAMPLE_BUFFERS : uint;
  const GL_SAMPLE_COVERAGE : uint;
  const GL_SAMPLE_ALPHA_TO_ONE : uint;
  const GL_SAMPLE_ALPHA_TO_COVERAGE : uint;
  const GL_MULTISAMPLE : uint;
  const GL_COMPRESSED_TEXTURE_FORMATS : uint;
  const GL_NUM_COMPRESSED_TEXTURE_FORMATS : uint;
  const GL_TEXTURE_COMPRESSED : uint;
  const GL_TEXTURE_COMPRESSED_IMAGE_SIZE : uint;
  const GL_TEXTURE_COMPRESSION_HINT : uint;
  const GL_COMPRESSED_RGBA : uint;
  const GL_COMPRESSED_RGB : uint;
  const GL_COMPRESSED_INTENSITY : uint;
  const GL_COMPRESSED_LUMINANCE_ALPHA : uint;
  const GL_COMPRESSED_LUMINANCE : uint;
  const GL_COMPRESSED_ALPHA : uint;
  const GL_MAX_CUBE_MAP_TEXTURE_SIZE : uint;
  const GL_PROXY_TEXTURE_CUBE_MAP : uint;
  const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z : uint;
  const GL_TEXTURE_CUBE_MAP_POSITIVE_Z : uint;
  const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y : uint;
  const GL_TEXTURE_CUBE_MAP_POSITIVE_Y : uint;
  const GL_TEXTURE_CUBE_MAP_NEGATIVE_X : uint;
  const GL_TEXTURE_CUBE_MAP_POSITIVE_X : uint;
  const GL_TEXTURE_BINDING_CUBE_MAP : uint;
  const GL_TEXTURE_CUBE_MAP : uint;
  const GL_REFLECTION_MAP : uint;
  const GL_NORMAL_MAP : uint;
  const GL_MAX_TEXTURE_UNITS : uint;
  const GL_CLIENT_ACTIVE_TEXTURE : uint;
  const GL_ACTIVE_TEXTURE : uint;
  const GL_TEXTURE31 : uint;
  const GL_TEXTURE30 : uint;
  const GL_TEXTURE29 : uint;
  const GL_TEXTURE28 : uint;
  const GL_TEXTURE27 : uint;
  const GL_TEXTURE26 : uint;
  const GL_TEXTURE25 : uint;
  const GL_TEXTURE24 : uint;
  const GL_TEXTURE23 : uint;
  const GL_TEXTURE22 : uint;
  const GL_TEXTURE21 : uint;
  const GL_TEXTURE20 : uint;
  const GL_TEXTURE19 : uint;
  const GL_TEXTURE18 : uint;
  const GL_TEXTURE17 : uint;
  const GL_TEXTURE16 : uint;
  const GL_TEXTURE15 : uint;
  const GL_TEXTURE14 : uint;
  const GL_TEXTURE13 : uint;
  const GL_TEXTURE12 : uint;
  const GL_TEXTURE11 : uint;
  const GL_TEXTURE10 : uint;
  const GL_TEXTURE9 : uint;
  const GL_TEXTURE8 : uint;
  const GL_TEXTURE7 : uint;
  const GL_TEXTURE6 : uint;
  const GL_TEXTURE5 : uint;
  const GL_TEXTURE4 : uint;
  const GL_TEXTURE3 : uint;
  const GL_TEXTURE2 : uint;
  const GL_TEXTURE1 : uint;
  const GL_TEXTURE0 : uint;
  const GL_BLEND_COLOR : uint;
  const GL_FUNC_REVERSE_SUBTRACT : uint;
  const GL_FUNC_SUBTRACT : uint;
  const GL_FUNC_ADD : uint;
  const GL_MAX : uint;
  const GL_MIN : uint;
  const GL_BLEND_EQUATION : uint;
  const GL_TABLE_TOO_LARGE : uint;
  const GL_MINMAX_SINK : uint;
  const GL_MINMAX_FORMAT : uint;
  const GL_MINMAX : uint;
  const GL_HISTOGRAM_SINK : uint;
  const GL_HISTOGRAM_LUMINANCE_SIZE : uint;
  const GL_HISTOGRAM_ALPHA_SIZE : uint;
  const GL_HISTOGRAM_BLUE_SIZE : uint;
  const GL_HISTOGRAM_GREEN_SIZE : uint;
  const GL_HISTOGRAM_RED_SIZE : uint;
  const GL_HISTOGRAM_FORMAT : uint;
  const GL_HISTOGRAM_WIDTH : uint;
  const GL_PROXY_HISTOGRAM : uint;
  const GL_HISTOGRAM : uint;
  const GL_POST_COLOR_MATRIX_ALPHA_BIAS : uint;
  const GL_POST_COLOR_MATRIX_BLUE_BIAS : uint;
  const GL_POST_COLOR_MATRIX_GREEN_BIAS : uint;
  const GL_POST_COLOR_MATRIX_RED_BIAS : uint;
  const GL_POST_COLOR_MATRIX_ALPHA_SCALE : uint;
  const GL_POST_COLOR_MATRIX_BLUE_SCALE : uint;
  const GL_POST_COLOR_MATRIX_GREEN_SCALE : uint;
  const GL_POST_COLOR_MATRIX_RED_SCALE : uint;
  const GL_MAX_COLOR_MATRIX_STACK_DEPTH : uint;
  const GL_COLOR_MATRIX_STACK_DEPTH : uint;
  const GL_COLOR_MATRIX : uint;
  const GL_CONVOLUTION_BORDER_COLOR : uint;
  const GL_REPLICATE_BORDER : uint;
  const GL_CONSTANT_BORDER : uint;
  const GL_POST_CONVOLUTION_ALPHA_BIAS : uint;
  const GL_POST_CONVOLUTION_BLUE_BIAS : uint;
  const GL_POST_CONVOLUTION_GREEN_BIAS : uint;
  const GL_POST_CONVOLUTION_RED_BIAS : uint;
  const GL_POST_CONVOLUTION_ALPHA_SCALE : uint;
  const GL_POST_CONVOLUTION_BLUE_SCALE : uint;
  const GL_POST_CONVOLUTION_GREEN_SCALE : uint;
  const GL_POST_CONVOLUTION_RED_SCALE : uint;
  const GL_MAX_CONVOLUTION_HEIGHT : uint;
  const GL_MAX_CONVOLUTION_WIDTH : uint;
  const GL_CONVOLUTION_HEIGHT : uint;
  const GL_CONVOLUTION_WIDTH : uint;
  const GL_CONVOLUTION_FORMAT : uint;
  const GL_REDUCE : uint;
  const GL_CONVOLUTION_FILTER_BIAS : uint;
  const GL_CONVOLUTION_FILTER_SCALE : uint;
  const GL_CONVOLUTION_BORDER_MODE : uint;
  const GL_SEPARABLE_2D : uint;
  const GL_CONVOLUTION_2D : uint;
  const GL_CONVOLUTION_1D : uint;
  const GL_COLOR_TABLE_INTENSITY_SIZE : uint;
  const GL_COLOR_TABLE_LUMINANCE_SIZE : uint;
  const GL_COLOR_TABLE_ALPHA_SIZE : uint;
  const GL_COLOR_TABLE_BLUE_SIZE : uint;
  const GL_COLOR_TABLE_GREEN_SIZE : uint;
  const GL_COLOR_TABLE_RED_SIZE : uint;
  const GL_COLOR_TABLE_WIDTH : uint;
  const GL_COLOR_TABLE_FORMAT : uint;
  const GL_COLOR_TABLE_BIAS : uint;
  const GL_COLOR_TABLE_SCALE : uint;
  const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE : uint;
  const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE : uint;
  const GL_PROXY_COLOR_TABLE : uint;
  const GL_POST_COLOR_MATRIX_COLOR_TABLE : uint;
  const GL_POST_CONVOLUTION_COLOR_TABLE : uint;
  const GL_COLOR_TABLE : uint;
  const GL_ONE_MINUS_CONSTANT_ALPHA : uint;
  const GL_CONSTANT_ALPHA : uint;
  const GL_ONE_MINUS_CONSTANT_COLOR : uint;
  const GL_CONSTANT_COLOR : uint;
  const GL_TEXTURE_BINDING_3D : uint;
  const GL_MAX_3D_TEXTURE_SIZE : uint;
  const GL_TEXTURE_WRAP_R : uint;
  const GL_TEXTURE_DEPTH : uint;
  const GL_PROXY_TEXTURE_3D : uint;
  const GL_TEXTURE_3D : uint;
  const GL_UNPACK_IMAGE_HEIGHT : uint;
  const GL_UNPACK_SKIP_IMAGES : uint;
  const GL_PACK_IMAGE_HEIGHT : uint;
  const GL_PACK_SKIP_IMAGES : uint;
  const GL_ALIASED_LINE_WIDTH_RANGE : uint;
  const GL_ALIASED_POINT_SIZE_RANGE : uint;
  const GL_SMOOTH_LINE_WIDTH_GRANULARITY : uint;
  const GL_SMOOTH_LINE_WIDTH_RANGE : uint;
  const GL_SMOOTH_POINT_SIZE_GRANULARITY : uint;
  const GL_SMOOTH_POINT_SIZE_RANGE : uint;
  const GL_TEXTURE_MAX_LEVEL : uint;
  const GL_TEXTURE_BASE_LEVEL : uint;
  const GL_TEXTURE_MAX_LOD : uint;
  const GL_TEXTURE_MIN_LOD : uint;
  const GL_SEPARATE_SPECULAR_COLOR : uint;
  const GL_SINGLE_COLOR : uint;
  const GL_LIGHT_MODEL_COLOR_CONTROL : uint;
  const GL_UNSIGNED_INT_2_10_10_10_REV : uint;
  const GL_UNSIGNED_INT_10_10_10_2 : uint;
  const GL_UNSIGNED_INT_8_8_8_8_REV : uint;
  const GL_UNSIGNED_INT_8_8_8_8 : uint;
  const GL_UNSIGNED_SHORT_1_5_5_5_REV : uint;
  const GL_UNSIGNED_SHORT_5_5_5_1 : uint;
  const GL_UNSIGNED_SHORT_4_4_4_4_REV : uint;
  const GL_UNSIGNED_SHORT_4_4_4_4 : uint;
  const GL_UNSIGNED_SHORT_5_6_5_REV : uint;
  const GL_UNSIGNED_SHORT_5_6_5 : uint;
  const GL_UNSIGNED_BYTE_2_3_3_REV : uint;
  const GL_UNSIGNED_BYTE_3_3_2 : uint;
  const GL_BGRA : uint;
  const GL_BGR : uint;
  const GL_MAX_ELEMENTS_INDICES : uint;
  const GL_MAX_ELEMENTS_VERTICES : uint;
  const GL_CLAMP_TO_EDGE : uint;
  const GL_RESCALE_NORMAL : uint;
  const GL_CLIENT_ALL_ATTRIB_BITS : uint;
  const GL_ALL_CLIENT_ATTRIB_BITS : uint;
  const GL_CLIENT_VERTEX_ARRAY_BIT : uint;
  const GL_CLIENT_PIXEL_STORE_BIT : uint;
  const GL_RGBA16 : uint;
  const GL_RGBA12 : uint;
  const GL_RGB10_A2 : uint;
  const GL_RGBA8 : uint;
  const GL_RGB5_A1 : uint;
  const GL_RGBA4 : uint;
  const GL_RGBA2 : uint;
  const GL_RGB16 : uint;
  const GL_RGB12 : uint;
  const GL_RGB10 : uint;
  const GL_RGB8 : uint;
  const GL_RGB5 : uint;
  const GL_RGB4 : uint;
  const GL_R3_G3_B2 : uint;
  const GL_INTENSITY16 : uint;
  const GL_INTENSITY12 : uint;
  const GL_INTENSITY8 : uint;
  const GL_INTENSITY4 : uint;
  const GL_INTENSITY : uint;
  const GL_LUMINANCE16_ALPHA16 : uint;
  const GL_LUMINANCE12_ALPHA12 : uint;
  const GL_LUMINANCE12_ALPHA4 : uint;
  const GL_LUMINANCE8_ALPHA8 : uint;
  const GL_LUMINANCE6_ALPHA2 : uint;
  const GL_LUMINANCE4_ALPHA4 : uint;
  const GL_LUMINANCE16 : uint;
  const GL_LUMINANCE12 : uint;
  const GL_LUMINANCE8 : uint;
  const GL_LUMINANCE4 : uint;
  const GL_ALPHA16 : uint;
  const GL_ALPHA12 : uint;
  const GL_ALPHA8 : uint;
  const GL_ALPHA4 : uint;
  const GL_TEXTURE_INTERNAL_FORMAT : uint;
  const GL_TEXTURE_BINDING_2D : uint;
  const GL_TEXTURE_BINDING_1D : uint;
  const GL_TEXTURE_RESIDENT : uint;
  const GL_TEXTURE_PRIORITY : uint;
  const GL_PROXY_TEXTURE_2D : uint;
  const GL_PROXY_TEXTURE_1D : uint;
  const GL_ALL_ATTRIB_BITS : uint;
  const GL_SCISSOR_BIT : uint;
  const GL_TEXTURE_BIT : uint;
  const GL_LIST_BIT : uint;
  const GL_EVAL_BIT : uint;
  const GL_HINT_BIT : uint;
  const GL_COLOR_BUFFER_BIT : uint;
  const GL_ENABLE_BIT : uint;
  const GL_TRANSFORM_BIT : uint;
  const GL_VIEWPORT_BIT : uint;
  const GL_STENCIL_BUFFER_BIT : uint;
  const GL_ACCUM_BUFFER_BIT : uint;
  const GL_DEPTH_BUFFER_BIT : uint;
  const GL_FOG_BIT : uint;
  const GL_LIGHTING_BIT : uint;
  const GL_PIXEL_MODE_BIT : uint;
  const GL_POLYGON_STIPPLE_BIT : uint;
  const GL_POLYGON_BIT : uint;
  const GL_LINE_BIT : uint;
  const GL_POINT_BIT : uint;
  const GL_CURRENT_BIT : uint;
  const GL_OUT_OF_MEMORY : uint;
  const GL_STACK_UNDERFLOW : uint;
  const GL_STACK_OVERFLOW : uint;
  const GL_INVALID_OPERATION : uint;
  const GL_INVALID_ENUM : uint;
  const GL_INVALID_VALUE : uint;
  const GL_NO_ERROR : uint;
  const GL_EXTENSIONS : uint;
  const GL_VERSION : uint;
  const GL_RENDERER : uint;
  const GL_VENDOR : uint;
  const GL_TEXTURE_GEN_Q : uint;
  const GL_TEXTURE_GEN_R : uint;
  const GL_Q : uint;
  const GL_R : uint;
  const GL_T : uint;
  const GL_S : uint;
  const GL_CLAMP : uint;
  const GL_REPEAT : uint;
  const GL_MODULATE : uint;
  const GL_DECAL : uint;
  const GL_SPHERE_MAP : uint;
  const GL_EYE_PLANE : uint;
  const GL_EYE_LINEAR : uint;
  const GL_OBJECT_PLANE : uint;
  const GL_OBJECT_LINEAR : uint;

  const GL_TEXTURE_INTENSITY_SIZE : uint;
  const GL_TEXTURE_LUMINANCE_SIZE : uint;
  const GL_TEXTURE_ALPHA_SIZE : uint;
  const GL_TEXTURE_BLUE_SIZE : uint;
  const GL_TEXTURE_GREEN_SIZE : uint;
  const GL_TEXTURE_RED_SIZE : uint;
  const GL_TEXTURE_COMPONENTS : uint;
  const GL_TEXTURE_BORDER : uint;
  const GL_TEXTURE_HEIGHT : uint;
  const GL_TEXTURE_WIDTH : uint;
  const GL_TEXTURE_BORDER_COLOR : uint;
  const GL_TEXTURE_GEN_MODE : uint;
  const GL_TEXTURE_GEN_T : uint;
  const GL_TEXTURE_GEN_S : uint;
  const GL_TEXTURE_ENV_COLOR : uint;
  const GL_TEXTURE_MIN_FILTER : uint;
  const GL_TEXTURE_MAG_FILTER : uint;
  const GL_TEXTURE_WRAP_T : uint;
  const GL_TEXTURE_WRAP_S : uint;
  const GL_TEXTURE_2D : uint;
  const GL_TEXTURE_1D : uint;
  const GL_TEXTURE_ENV_MODE : uint;
  const GL_TEXTURE_ENV : uint;
  const GL_ZOOM_Y : uint;
  const GL_ZOOM_X : uint;
  const GL_UNPACK_SWAP_BYTES : uint;
  const GL_UNPACK_SKIP_ROWS : uint;
  const GL_UNPACK_SKIP_PIXELS : uint;
  const GL_UNPACK_ROW_LENGTH : uint;
  const GL_UNPACK_LSB_FIRST : uint;
  const GL_UNPACK_ALIGNMENT : uint;
  const GL_PACK_SWAP_BYTES : uint;
  const GL_PACK_SKIP_ROWS : uint;
  const GL_PACK_SKIP_PIXELS : uint;
  const GL_PACK_ROW_LENGTH : uint;
  const GL_PACK_LSB_FIRST : uint;
  const GL_PACK_ALIGNMENT : uint;
  const GL_PIXEL_MAP_A_TO_A : uint;
  const GL_PIXEL_MAP_B_TO_B : uint;
  const GL_PIXEL_MAP_G_TO_G : uint;
  const GL_PIXEL_MAP_R_TO_R : uint;
  const GL_PIXEL_MAP_I_TO_A : uint;
  const GL_PIXEL_MAP_I_TO_B : uint;
  const GL_PIXEL_MAP_I_TO_G : uint;
  const GL_PIXEL_MAP_I_TO_R : uint;
  const GL_PIXEL_MAP_I_TO_I : uint;
  const GL_PIXEL_MAP_S_TO_S : uint;
  const GL_PIXEL_MAP_A_TO_A_SIZE : uint;
  const GL_PIXEL_MAP_B_TO_B_SIZE : uint;
  const GL_PIXEL_MAP_G_TO_G_SIZE : uint;
  const GL_PIXEL_MAP_R_TO_R_SIZE : uint;
  const GL_PIXEL_MAP_I_TO_A_SIZE : uint;
  const GL_PIXEL_MAP_I_TO_B_SIZE : uint;
  const GL_PIXEL_MAP_I_TO_G_SIZE : uint;
  const GL_PIXEL_MAP_I_TO_R_SIZE : uint;
  const GL_PIXEL_MAP_I_TO_I_SIZE : uint;
  const GL_PIXEL_MAP_S_TO_S_SIZE : uint;
  const GL_DEPTH_BIAS : uint;
  const GL_DEPTH_SCALE : uint;
  const GL_ALPHA_BIAS : uint;
  const GL_ALPHA_SCALE : uint;
  const GL_BLUE_BIAS : uint;
  const GL_BLUE_SCALE : uint;
  const GL_GREEN_BIAS : uint;
  const GL_GREEN_SCALE : uint;
  const GL_RED_BIAS : uint;
  const GL_RED_SCALE : uint;
  const GL_INDEX_OFFSET : uint;
  const GL_INDEX_SHIFT : uint;
  const GL_MAP_STENCIL : uint;
  const GL_MAP_COLOR : uint;
  const GL_SCISSOR_BOX : uint;
  const GL_SCISSOR_TEST : uint;
  const GL_NICEST : uint;
  const GL_FASTEST : uint;
  const GL_DONT_CARE : uint;
  const GL_POLYGON_SMOOTH_HINT : uint;
  const GL_POINT_SMOOTH_HINT : uint;
  const GL_PERSPECTIVE_CORRECTION_HINT : uint;
  const GL_LINE_SMOOTH_HINT : uint;
  const GL_FOG_HINT : uint;
  const GL_ORDER : uint;
  const GL_DOMAIN : uint;
  const GL_COEFF : uint;
  const GL_MAP2_GRID_SEGMENTS : uint;
  const GL_MAP2_GRID_DOMAIN : uint;
  const GL_MAP1_GRID_SEGMENTS : uint;
  const GL_MAP1_GRID_DOMAIN : uint;
  const GL_MAP2_VERTEX_4 : uint;
  const GL_MAP2_VERTEX_3 : uint;
  const GL_MAP2_TEXTURE_COORD_4 : uint;
  const GL_MAP2_TEXTURE_COORD_3 : uint;
  const GL_MAP2_TEXTURE_COORD_2 : uint;
  const GL_MAP2_TEXTURE_COORD_1 : uint;
  const GL_MAP2_NORMAL : uint;
  const GL_MAP2_INDEX : uint;
  const GL_MAP2_COLOR_4 : uint;
  const GL_MAP1_VERTEX_4 : uint;
  const GL_MAP1_VERTEX_3 : uint;
  const GL_MAP1_TEXTURE_COORD_4 : uint;
  const GL_MAP1_TEXTURE_COORD_3 : uint;
  const GL_MAP1_TEXTURE_COORD_2 : uint;
  const GL_MAP1_TEXTURE_COORD_1 : uint;
  const GL_MAP1_NORMAL : uint;
  const GL_MAP1_INDEX : uint;
  const GL_MAP1_COLOR_4 : uint;
  const GL_AUTO_NORMAL : uint;
  const GL_VIEWPORT : uint;
  const GL_TEXTURE_STACK_DEPTH : uint;
  const GL_TEXTURE_MATRIX : uint;
  const GL_RGBA_MODE : uint;
  const GL_RENDER_MODE : uint;
  const GL_PROJECTION_STACK_DEPTH : uint;
  const GL_PROJECTION_MATRIX : uint;
  const GL_NAME_STACK_DEPTH : uint;
  const GL_MODELVIEW_STACK_DEPTH : uint;
  const GL_MODELVIEW_MATRIX : uint;
  const GL_INDEX_WRITEMASK : uint;
  const GL_INDEX_MODE : uint;
  const GL_INDEX_CLEAR_VALUE : uint;
  const GL_CURRENT_TEXTURE_COORDS : uint;
  const GL_CURRENT_RASTER_POSITION_VALID : uint;
  const GL_CURRENT_RASTER_TEXTURE_COORDS : uint;
  const GL_CURRENT_RASTER_POSITION : uint;
  const GL_CURRENT_RASTER_INDEX : uint;
  const GL_CURRENT_RASTER_DISTANCE : uint;
  const GL_CURRENT_RASTER_COLOR : uint;
  const GL_CURRENT_NORMAL : uint;
  const GL_CURRENT_COLOR : uint;
  const GL_CURRENT_INDEX : uint;
  const GL_COLOR_WRITEMASK : uint;
  const GL_COLOR_CLEAR_VALUE : uint;
  const GL_CLIENT_ATTRIB_STACK_DEPTH : uint;
  const GL_ATTRIB_STACK_DEPTH : uint;
  const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH : uint;
  const GL_MAX_VIEWPORT_DIMS : uint;
  const GL_MAX_PIXEL_MAP_TABLE : uint;
  const GL_MAX_TEXTURE_SIZE : uint;
  const GL_MAX_CLIP_PLANES : uint;
  const GL_MAX_LIGHTS : uint;
  const GL_MAX_EVAL_ORDER : uint;
  const GL_MAX_TEXTURE_STACK_DEPTH : uint;
  const GL_MAX_PROJECTION_STACK_DEPTH : uint;
  const GL_MAX_NAME_STACK_DEPTH : uint;
  const GL_MAX_MODELVIEW_STACK_DEPTH : uint;
  const GL_MAX_ATTRIB_STACK_DEPTH : uint;
  const GL_MAX_LIST_NESTING : uint;
  const GL_RGBA : uint;
  const GL_RGB : uint;
  const GL_DITHER : uint;
  const GL_STENCIL : uint;
  const GL_DEPTH : uint;
  const GL_COLOR : uint;
  const GL_BITMAP : uint;
  const GL_STEREO : uint;
  const GL_DOUBLEBUFFER : uint;
  const GL_DRAW_BUFFER : uint;
  const GL_READ_BUFFER : uint;
  const GL_AUX_BUFFERS : uint;
  const GL_SUBPIXEL_BITS : uint;
  const GL_INDEX_BITS : uint;
  const GL_BLUE_BITS : uint;
  const GL_GREEN_BITS : uint;
  const GL_RED_BITS : uint;
  const GL_ALPHA_BITS : uint;
  const GL_LUMINANCE_ALPHA : uint;
  const GL_LUMINANCE : uint;
  const GL_ALPHA : uint;
  const GL_BLUE : uint;
  const GL_GREEN : uint;
  const GL_RED : uint;
  const GL_COLOR_INDEX : uint;
  const GL_AUX3 : uint;
  const GL_AUX2 : uint;
  const GL_AUX1 : uint;
  const GL_AUX0 : uint;
  const GL_BACK_RIGHT : uint;
  const GL_BACK_LEFT : uint;
  const GL_FRONT_RIGHT : uint;
  const GL_FRONT_LEFT : uint;
  const GL_RIGHT : uint;
  const GL_LEFT : uint;
  const GL_NONE : uint;
  const GL_DECR : uint;
  const GL_INCR : uint;
  const GL_REPLACE : uint;
  const GL_KEEP : uint;
  const GL_STENCIL_INDEX : uint;
  const GL_STENCIL_CLEAR_VALUE : uint;
  const GL_STENCIL_PASS_DEPTH_FAIL : uint;
  const GL_STENCIL_PASS_DEPTH_PASS : uint;
  const GL_STENCIL_FAIL : uint;
  const GL_STENCIL_REF : uint;
  const GL_STENCIL_VALUE_MASK : uint;
  const GL_STENCIL_FUNC : uint;
  const GL_STENCIL_BITS : uint;
  const GL_STENCIL_WRITEMASK : uint;
  const GL_STENCIL_TEST : uint;
  const GL_OR_INVERTED : uint;
  const GL_OR_REVERSE : uint;
  const GL_AND_INVERTED : uint;
  const GL_AND_REVERSE : uint;
  const GL_EQUIV : uint;
  const GL_XOR : uint;
  const GL_NOR : uint;
  const GL_OR : uint;
  const GL_NAND : uint;
  const GL_AND : uint;
  const GL_INVERT : uint;
  const GL_NOOP : uint;
  const GL_COPY_INVERTED : uint;
  const GL_COPY : uint;
  const GL_SET : uint;
  const GL_CLEAR : uint;
  const GL_LOGIC_OP_MODE : uint;
  const GL_COLOR_LOGIC_OP : uint;
  const GL_INDEX_LOGIC_OP : uint;
  const GL_LOGIC_OP : uint;

  const GL_EXP2 : int;
  const GL_EXP : int;
  const GL_LINEAR : int;
  const GL_NEAREST : int;
  const GL_LINEAR_MIPMAP_LINEAR : int;
  const GL_LINEAR_MIPMAP_NEAREST : int;
  const GL_NEAREST_MIPMAP_LINEAR : int;
  const GL_NEAREST_MIPMAP_NEAREST : int;

  const GL_FOG_END : uint;
  const GL_FOG_START : uint;
  const GL_FOG_INDEX : uint;
  const GL_FOG_COLOR : uint;
  const GL_FOG_DENSITY : uint;
  const GL_FOG_MODE : uint;
  const GL_FOG : uint;
  const GL_SELECTION_BUFFER_SIZE : uint;
  const GL_SELECTION_BUFFER_POINTER : uint;
  const GL_FEEDBACK_BUFFER_TYPE : uint;
  const GL_FEEDBACK_BUFFER_SIZE : uint;
  const GL_FEEDBACK_BUFFER_POINTER : uint;
  const GL_PASS_THROUGH_TOKEN : uint;
  const GL_COPY_PIXEL_TOKEN : uint;
  const GL_DRAW_PIXEL_TOKEN : uint;
  const GL_BITMAP_TOKEN : uint;
  const GL_POLYGON_TOKEN : uint;
  const GL_LINE_RESET_TOKEN : uint;
  const GL_LINE_TOKEN : uint;
  const GL_POINT_TOKEN : uint;
  const GL_4D_COLOR_TEXTURE : uint;
  const GL_3D_COLOR_TEXTURE : uint;
  const GL_3D_COLOR : uint;
  const GL_3D : uint;
  const GL_2D : uint;
  const GL_SELECT : uint;
  const GL_RENDER : uint;
  const GL_FEEDBACK : uint;
  const GL_SRC_ALPHA_SATURATE : uint;
  const GL_ONE_MINUS_DST_COLOR : uint;
  const GL_DST_COLOR : uint;
  const GL_ONE_MINUS_DST_ALPHA : uint;
  const GL_DST_ALPHA : uint;
  const GL_ONE_MINUS_SRC_ALPHA : uint;
  const GL_SRC_ALPHA : uint;
  const GL_ONE_MINUS_SRC_COLOR : uint;
  const GL_SRC_COLOR : uint;
  const GL_ONE : uint;
  const GL_ZERO : uint;
  const GL_BLEND_DST : uint;
  const GL_BLEND_SRC : uint;
  const GL_BLEND : uint;
  const GL_ALPHA_TEST_FUNC : uint;
  const GL_ALPHA_TEST_REF : uint;
  const GL_ALPHA_TEST : uint;
  const GL_RETURN : uint;
  const GL_MULT : uint;
  const GL_LOAD : uint;
  const GL_ADD : uint;
  const GL_ACCUM : uint;
  const GL_ACCUM_CLEAR_VALUE : uint;
  const GL_ACCUM_ALPHA_BITS : uint;
  const GL_ACCUM_BLUE_BITS : uint;
  const GL_ACCUM_GREEN_BITS : uint;
  const GL_ACCUM_RED_BITS : uint;
  const GL_CLIP_PLANE5 : uint;
  const GL_CLIP_PLANE4 : uint;
  const GL_CLIP_PLANE3 : uint;
  const GL_CLIP_PLANE2 : uint;
  const GL_CLIP_PLANE1 : uint;
  const GL_CLIP_PLANE0 : uint;
  const GL_NORMALIZE : uint;
  const GL_COLOR_MATERIAL_PARAMETER : uint;
  const GL_COLOR_MATERIAL_FACE : uint;
  const GL_COLOR_MATERIAL : uint;
  const GL_SMOOTH : uint;
  const GL_FLAT : uint;
  const GL_SHADE_MODEL : uint;
  const GL_FRONT_AND_BACK : uint;
  const GL_LIGHT_MODEL_AMBIENT : uint;
  const GL_LIGHT_MODEL_LOCAL_VIEWER : uint;
  const GL_LIGHT_MODEL_TWO_SIDE : uint;
  const GL_COLOR_INDEXES : uint;
  const GL_AMBIENT_AND_DIFFUSE : uint;
  const GL_SPOT_DIRECTION : uint;
  const GL_POSITION : uint;
  const GL_EMISSION : uint;
  const GL_SHININESS : uint;
  const GL_SPECULAR : uint;
  const GL_DIFFUSE : uint;
  const GL_AMBIENT : uint;
  const GL_QUADRATIC_ATTENUATION : uint;
  const GL_LINEAR_ATTENUATION : uint;
  const GL_CONSTANT_ATTENUATION : uint;
  const GL_SPOT_CUTOFF : uint;
  const GL_SPOT_EXPONENT : uint;
  const GL_LIGHT7 : uint;
  const GL_LIGHT6 : uint;
  const GL_LIGHT5 : uint;
  const GL_LIGHT4 : uint;
  const GL_LIGHT3 : uint;
  const GL_LIGHT2 : uint;
  const GL_LIGHT1 : uint;
  const GL_LIGHT0 : uint;
  const GL_LIGHTING : uint;
  const GL_DEPTH_COMPONENT : uint;
  const GL_DEPTH_WRITEMASK : uint;
  const GL_DEPTH_RANGE : uint;
  const GL_DEPTH_FUNC : uint;
  const GL_DEPTH_CLEAR_VALUE : uint;
  const GL_DEPTH_BITS : uint;
  const GL_DEPTH_TEST : uint;
  const GL_ALWAYS : uint;
  const GL_GEQUAL : uint;
  const GL_NOTEQUAL : uint;
  const GL_GREATER : uint;
  const GL_LEQUAL : uint;
  const GL_EQUAL : uint;
  const GL_LESS : uint;
  const GL_NEVER : uint;
  const GL_LIST_MODE : uint;
  const GL_LIST_INDEX : uint;
  const GL_LIST_BASE : uint;
  const GL_COMPILE_AND_EXECUTE : uint;
  const GL_COMPILE : uint;
  const GL_POLYGON_OFFSET_FILL : uint;
  const GL_POLYGON_OFFSET_LINE : uint;
  const GL_POLYGON_OFFSET_POINT : uint;
  const GL_POLYGON_OFFSET_UNITS : uint;
  const GL_POLYGON_OFFSET_FACTOR : uint;
  const GL_FRONT_FACE : uint;
  const GL_CULL_FACE_MODE : uint;
  const GL_CULL_FACE : uint;
  const GL_EDGE_FLAG : uint;
  const GL_POLYGON_STIPPLE : uint;
  const GL_POLYGON_SMOOTH : uint;
  const GL_POLYGON_MODE : uint;
  const GL_BACK : uint;
  const GL_FRONT : uint;
  const GL_CCW : uint;
  const GL_CW : uint;
  const GL_FILL : uint;
  const GL_LINE : uint;
  const GL_POINT : uint;
  const GL_LINE_WIDTH_RANGE : uint;
  const GL_LINE_WIDTH_GRANULARITY : uint;
  const GL_LINE_WIDTH : uint;
  const GL_LINE_STIPPLE_REPEAT : uint;
  const GL_LINE_STIPPLE_PATTERN : uint;
  const GL_LINE_STIPPLE : uint;
  const GL_LINE_SMOOTH : uint;
  const GL_POINT_SIZE_RANGE : uint;
  const GL_POINT_SIZE_GRANULARITY : uint;
  const GL_POINT_SIZE : uint;
  const GL_POINT_SMOOTH : uint;
  const GL_TEXTURE : uint;
  const GL_PROJECTION : uint;
  const GL_MODELVIEW : uint;
  const GL_MATRIX_MODE : uint;
  const GL_T4F_C4F_N3F_V4F : uint;
  const GL_T2F_C4F_N3F_V3F : uint;
  const GL_T2F_N3F_V3F : uint;
  const GL_T2F_C3F_V3F : uint;
  const GL_T2F_C4UB_V3F : uint;
  const GL_T4F_V4F : uint;
  const GL_T2F_V3F : uint;
  const GL_C4F_N3F_V3F : uint;
  const GL_N3F_V3F : uint;
  const GL_C3F_V3F : uint;
  const GL_C4UB_V3F : uint;
  const GL_C4UB_V2F : uint;
  const GL_V3F : uint;
  const GL_V2F : uint;
  const GL_EDGE_FLAG_ARRAY_POINTER : uint;
  const GL_TEXTURE_COORD_ARRAY_POINTER : uint;
  const GL_INDEX_ARRAY_POINTER : uint;
  const GL_COLOR_ARRAY_POINTER : uint;
  const GL_NORMAL_ARRAY_POINTER : uint;
  const GL_VERTEX_ARRAY_POINTER : uint;
  const GL_EDGE_FLAG_ARRAY_STRIDE : uint;
  const GL_TEXTURE_COORD_ARRAY_STRIDE : uint;
  const GL_TEXTURE_COORD_ARRAY_TYPE : uint;
  const GL_TEXTURE_COORD_ARRAY_SIZE : uint;
  const GL_INDEX_ARRAY_STRIDE : uint;
  const GL_INDEX_ARRAY_TYPE : uint;
  const GL_COLOR_ARRAY_STRIDE : uint;
  const GL_COLOR_ARRAY_TYPE : uint;
  const GL_COLOR_ARRAY_SIZE : uint;
  const GL_NORMAL_ARRAY_STRIDE : uint;
  const GL_NORMAL_ARRAY_TYPE : uint;
  const GL_VERTEX_ARRAY_STRIDE : uint;
  const GL_VERTEX_ARRAY_TYPE : uint;
  const GL_VERTEX_ARRAY_SIZE : uint;
  const GL_EDGE_FLAG_ARRAY : uint;
  const GL_TEXTURE_COORD_ARRAY : uint;
  const GL_INDEX_ARRAY : uint;
  const GL_COLOR_ARRAY : uint;
  const GL_NORMAL_ARRAY : uint;
  const GL_VERTEX_ARRAY : uint;
  const GL_POLYGON : uint;
  const GL_QUAD_STRIP : uint;
  const GL_QUADS : uint;
  const GL_TRIANGLE_FAN : uint;
  const GL_TRIANGLE_STRIP : uint;
  const GL_TRIANGLES : uint;
  const GL_LINE_STRIP : uint;
  const GL_LINE_LOOP : uint;
  const GL_LINES : uint;
  const GL_POINTS : uint;
  const GL_DOUBLE : uint;
  const GL_4_BYTES : uint;
  const GL_3_BYTES : uint;
  const GL_2_BYTES : uint;
  const GL_FLOAT : uint;
  const GL_UNSIGNED_INT : uint;
  const GL_INT : uint;
  const GL_UNSIGNED_SHORT : uint;
  const GL_SHORT : uint;
  const GL_UNSIGNED_BYTE : uint;
  const GL_BYTE : uint;
  const GL_TRUE : uint;
  const GL_FALSE : uint;
  const GL_ARB_imaging : uint;
  const GL_VERSION_1_3 : uint;
  const GL_VERSION_1_2 : uint;
  const GL_VERSION_1_1 : uint;
//#define signed
//#define GLAPIENTRYP GLAPIENTRY *
//#define APIENTRYP APIENTRY *
//#define APIENTRY GLAPIENTRY
//#define GLAPIENTRY
//#define GLAPI extern
  const WIN32_LEAN_AND_MEAN : int;
  const PRAGMA_EXPORT_SUPPORTED : int;
//#define GLAPIENTRY
//#define GLAPI __attribute__((visibility("default")))
//#define GLAPIENTRY __stdcall
//#define GLAPI extern
//#define GLAPIENTRY __stdcall
//#define GLAPI extern
//#define GLAPI __declspec(dllimport)
//#define GLAPI __declspec(dllexport)
//#define __WIN32__
//#define OPENSTEP
//#define __gl_h_


  //C FUNCTION POINTER TYPES
  header '''typedef void (*GL_gl_h_cft_55)(GLenum, GLenum);''';
  type GL_gl_h_cft_55 = 'GL_gl_h_cft_55';
  header '''typedef void (*GL_gl_h_cft_46)(GLclampf, GLboolean);''';
  type GL_gl_h_cft_46 = 'GL_gl_h_cft_46';
  header '''typedef void (*GL_gl_h_cft_31)(GLenum, GLshort);''';
  type GL_gl_h_cft_31 = 'GL_gl_h_cft_31';
  header '''typedef void (*GL_gl_h_cft_29)(GLenum, GLint);''';
  type GL_gl_h_cft_29 = 'GL_gl_h_cft_29';
  header '''typedef void (*GL_gl_h_cft_27)(GLenum, GLfloat);''';
  type GL_gl_h_cft_27 = 'GL_gl_h_cft_27';
  header '''typedef void (*GL_gl_h_cft_25)(GLenum, GLdouble);''';
  type GL_gl_h_cft_25 = 'GL_gl_h_cft_25';
  header '''typedef void (*GL_gl_h_cft_36)(GLenum, GLshort, GLshort);''';
  type GL_gl_h_cft_36 = 'GL_gl_h_cft_36';
  header '''typedef void (*GL_gl_h_cft_35)(GLenum, GLint, GLint);''';
  type GL_gl_h_cft_35 = 'GL_gl_h_cft_35';
  header '''typedef void (*GL_gl_h_cft_24)(GLenum, GLenum, GLboolean);''';
  type GL_gl_h_cft_24 = 'GL_gl_h_cft_24';
  header '''typedef void (*GL_gl_h_cft_18)(GLenum, GLenum, GLint);''';
  type GL_gl_h_cft_18 = 'GL_gl_h_cft_18';
  header '''typedef void (*GL_gl_h_cft_43)(GLenum, GLshort, GLshort,  GLshort, GLshort);''';
  type GL_gl_h_cft_43 = 'GL_gl_h_cft_43';
  header '''typedef void (*GL_gl_h_cft_42)(GLenum, GLfloat, GLfloat,  GLfloat, GLfloat);''';
  type GL_gl_h_cft_42 = 'GL_gl_h_cft_42';
  header '''typedef void (*GL_gl_h_cft_41)(GLenum, GLdouble, GLdouble,  GLdouble, GLdouble);''';
  type GL_gl_h_cft_41 = 'GL_gl_h_cft_41';
  header '''typedef void (*GL_gl_h_cft_34)(GLenum, GLfloat, GLfloat);''';
  type GL_gl_h_cft_34 = 'GL_gl_h_cft_34';
  header '''typedef void (*GL_gl_h_cft_33)(GLenum, GLdouble, GLdouble);''';
  type GL_gl_h_cft_33 = 'GL_gl_h_cft_33';
  header '''typedef void (*GL_gl_h_cft_22)(GLenum, GLboolean, GLenum,  GLenum, GLvoid *);''';
  type GL_gl_h_cft_22 = 'GL_gl_h_cft_22';
  header '''typedef void (*GL_gl_h_cft_17)(GLenum, GLenum, GLfloat);''';
  type GL_gl_h_cft_17 = 'GL_gl_h_cft_17';
  header '''typedef void (*GL_gl_h_cft_15)(GLenum, GLsizei, GLint,  GLint, GLsizei);''';
  type GL_gl_h_cft_15 = 'GL_gl_h_cft_15';
  header '''typedef void (*GL_gl_h_cft_10)(GLenum, GLenum, GLint,  GLint, GLsizei);''';
  type GL_gl_h_cft_10 = 'GL_gl_h_cft_10';
  header '''typedef void (*GL_gl_h_cft_11)(GLenum, GLenum, GLenum,  GLvoid *);''';
  type GL_gl_h_cft_11 = 'GL_gl_h_cft_11';
  header '''typedef void (*GL_gl_h_cft_53)(GLenum, GLint, void *);''';
  type GL_gl_h_cft_53 = 'GL_gl_h_cft_53';
  header '''typedef void (*GL_gl_h_cft_13)(GLenum, GLenum, GLint *);''';
  type GL_gl_h_cft_13 = 'GL_gl_h_cft_13';
  header '''typedef void (*GL_gl_h_cft_12)(GLenum, GLenum, GLfloat *);''';
  type GL_gl_h_cft_12 = 'GL_gl_h_cft_12';
  header '''typedef void (*GL_gl_h_cft_9)(GLenum, GLenum,  GLint const *);''';
  type GL_gl_h_cft_9 = 'GL_gl_h_cft_9';
  header '''typedef void (*GL_gl_h_cft_8)(GLenum, GLenum,  GLfloat const *);''';
  type GL_gl_h_cft_8 = 'GL_gl_h_cft_8';
  header '''typedef void (*GL_gl_h_cft_40)(GLenum, GLshort, GLshort,  GLshort);''';
  type GL_gl_h_cft_40 = 'GL_gl_h_cft_40';
  header '''typedef void (*GL_gl_h_cft_39)(GLenum, GLint, GLint,  GLint);''';
  type GL_gl_h_cft_39 = 'GL_gl_h_cft_39';
  header '''typedef void (*GL_gl_h_cft_38)(GLenum, GLfloat, GLfloat,  GLfloat);''';
  type GL_gl_h_cft_38 = 'GL_gl_h_cft_38';
  header '''typedef void (*GL_gl_h_cft_37)(GLenum, GLdouble, GLdouble,  GLdouble);''';
  type GL_gl_h_cft_37 = 'GL_gl_h_cft_37';
  header '''typedef void (*GL_gl_h_cft_23)(GLenum, GLsizei, GLenum,  GLboolean);''';
  type GL_gl_h_cft_23 = 'GL_gl_h_cft_23';
  header '''typedef void (*GL_gl_h_cft_5)(GLclampf, GLclampf, GLclampf,  GLclampf);''';
  type GL_gl_h_cft_5 = 'GL_gl_h_cft_5';
  header '''typedef void (*GL_gl_h_cft_54)(GLenum, GLvoid *);''';
  type GL_gl_h_cft_54 = 'GL_gl_h_cft_54';
  header '''typedef void (*GL_gl_h_cft_32)(GLenum, GLshort const *);''';
  type GL_gl_h_cft_32 = 'GL_gl_h_cft_32';
  header '''typedef void (*GL_gl_h_cft_30)(GLenum, GLint const *);''';
  type GL_gl_h_cft_30 = 'GL_gl_h_cft_30';
  header '''typedef void (*GL_gl_h_cft_28)(GLenum, GLfloat const *);''';
  type GL_gl_h_cft_28 = 'GL_gl_h_cft_28';
  header '''typedef void (*GL_gl_h_cft_26)(GLenum, GLdouble const *);''';
  type GL_gl_h_cft_26 = 'GL_gl_h_cft_26';
  header '''typedef void (*GL_gl_h_cft_6)(GLenum);''';
  type GL_gl_h_cft_6 = 'GL_gl_h_cft_6';
  header '''typedef void (*GL_gl_h_cft_45)(GLdouble const *);''';
  type GL_gl_h_cft_45 = 'GL_gl_h_cft_45';
  header '''typedef void (*GL_gl_h_cft_44)(GLfloat const *);''';
  type GL_gl_h_cft_44 = 'GL_gl_h_cft_44';
  header '''typedef void (*GL_gl_h_cft_52)(GLenum, GLint, GLint,  GLsizei, GLenum, GLsizei,  GLvoid const *);''';
  type GL_gl_h_cft_52 = 'GL_gl_h_cft_52';
  header '''typedef void (*GL_gl_h_cft_51)(GLenum, GLint, GLint,  GLint, GLsizei, GLsizei,  GLenum, GLsizei,  GLvoid const *);''';
  type GL_gl_h_cft_51 = 'GL_gl_h_cft_51';
  header '''typedef void (*GL_gl_h_cft_50)(GLenum, GLint, GLint,  GLint, GLint, GLsizei,  GLsizei, GLsizei, GLenum,  GLsizei, GLvoid const *);''';
  type GL_gl_h_cft_50 = 'GL_gl_h_cft_50';
  header '''typedef void (*GL_gl_h_cft_49)(GLenum, GLint, GLenum,  GLsizei, GLint, GLsizei,  GLvoid const *);''';
  type GL_gl_h_cft_49 = 'GL_gl_h_cft_49';
  header '''typedef void (*GL_gl_h_cft_48)(GLenum, GLint, GLenum,  GLsizei, GLsizei, GLint,  GLsizei, GLvoid const *);''';
  type GL_gl_h_cft_48 = 'GL_gl_h_cft_48';
  header '''typedef void (*GL_gl_h_cft_47)(GLenum, GLint, GLenum,  GLsizei, GLsizei, GLsizei,  GLint, GLsizei,  GLvoid const *);''';
  type GL_gl_h_cft_47 = 'GL_gl_h_cft_47';
  header '''typedef void (*GL_gl_h_cft_21)(GLenum, GLenum, GLsizei,  GLsizei, GLenum, GLenum,  GLvoid const *,  GLvoid const *);''';
  type GL_gl_h_cft_21 = 'GL_gl_h_cft_21';
  header '''typedef void (*GL_gl_h_cft_20)(GLenum, GLenum, GLenum,  GLvoid *, GLvoid *, GLvoid *);''';
  type GL_gl_h_cft_20 = 'GL_gl_h_cft_20';
  header '''typedef void (*GL_gl_h_cft_19)(GLenum, GLenum, GLint,  GLint, GLsizei, GLsizei);''';
  type GL_gl_h_cft_19 = 'GL_gl_h_cft_19';
  header '''typedef void (*GL_gl_h_cft_16)(GLenum, GLenum, GLsizei,  GLsizei, GLenum, GLenum,  GLvoid const *);''';
  type GL_gl_h_cft_16 = 'GL_gl_h_cft_16';
  header '''typedef void (*GL_gl_h_cft_14)(GLenum, GLsizei, GLsizei,  GLenum, GLenum,  GLvoid const *);''';
  type GL_gl_h_cft_14 = 'GL_gl_h_cft_14';
  header '''typedef void (*GL_gl_h_cft_7)(GLenum, GLenum, GLsizei,  GLenum, GLenum,  GLvoid const *);''';
  type GL_gl_h_cft_7 = 'GL_gl_h_cft_7';
  header '''typedef void (*GL_gl_h_cft_4)(GLenum, GLint, GLint,  GLint, GLint, GLint, GLint,  GLsizei, GLsizei);''';
  type GL_gl_h_cft_4 = 'GL_gl_h_cft_4';
  header '''typedef void (*GL_gl_h_cft_3)(GLenum, GLint, GLint,  GLint, GLint, GLsizei,  GLsizei, GLsizei, GLenum,  GLenum, GLvoid const *);''';
  type GL_gl_h_cft_3 = 'GL_gl_h_cft_3';
  header '''typedef void (*GL_gl_h_cft_2)(GLenum, GLint, GLint,  GLsizei, GLsizei, GLsizei,  GLint, GLenum, GLenum,  GLvoid const *);''';
  type GL_gl_h_cft_2 = 'GL_gl_h_cft_2';
  header '''typedef void (*GL_gl_h_cft_1)(GLenum, GLuint, GLuint,  GLsizei, GLenum,  GLvoid const *);''';
  type GL_gl_h_cft_1 = 'GL_gl_h_cft_1';

  //TYPE ALIASES
  typedef PFNGLGETCOLORTABLEPARAMETERFVPROC = GL_gl_h_cft_12;
  typedef PFNGLMULTITEXCOORD4FVPROC = GL_gl_h_cft_28;
  typedef PFNGLMULTITEXCOORD3FVARBPROC = GL_gl_h_cft_28;
  typedef PFNGLMULTITEXCOORD2FPROC = GL_gl_h_cft_34;
  typedef PFNGLMULTITEXCOORD3SARBPROC = GL_gl_h_cft_40;
  typedef PFNGLMULTITEXCOORD1SARBPROC = GL_gl_h_cft_31;
  typedef GLsizei = int;
  typedef PFNGLCOPYTEXSUBIMAGE3DPROC = GL_gl_h_cft_4;
  typedef GLshort = short;
  typedef PFNGLCONVOLUTIONFILTER2DPROC = GL_gl_h_cft_16;
  typedef PFNGLMULTITEXCOORD3FARBPROC = GL_gl_h_cft_38;
  typedef PFNGLRESETMINMAXPROC = GL_gl_h_cft_6;
  typedef PFNGLMULTITEXCOORD1SVPROC = GL_gl_h_cft_32;
  typedef PFNGLGETHISTOGRAMPROC = GL_gl_h_cft_22;
  typedef PFNGLMULTITEXCOORD3IARBPROC = GL_gl_h_cft_39;
  typedef PFNGLMULTITEXCOORD1FVARBPROC = GL_gl_h_cft_28;
  typedef PFNGLCOMPRESSEDTEXIMAGE2DPROC = GL_gl_h_cft_48;
  typedef PFNGLGETSEPARABLEFILTERPROC = GL_gl_h_cft_20;
  typedef PFNGLGETCONVOLUTIONFILTERPROC = GL_gl_h_cft_11;
  typedef PFNGLMULTITEXCOORD1IVPROC = GL_gl_h_cft_30;
  typedef PFNGLMULTITEXCOORD4IPROC = GL_gl_h_cft_15;
  typedef PFNGLCONVOLUTIONPARAMETERIPROC = GL_gl_h_cft_18;
  typedef PFNGLMULTITEXCOORD2SVPROC = GL_gl_h_cft_32;
  typedef PFNGLMULTITEXCOORD1DVPROC = GL_gl_h_cft_26;
  typedef PFNGLGETMINMAXPROC = GL_gl_h_cft_22;
  typedef GLdouble = double;
  typedef GLint = int;
  typedef GLvoid = void_t;
  typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = GL_gl_h_cft_52;
  typedef PFNGLMULTITEXCOORD1DPROC = GL_gl_h_cft_25;
  typedef GLushort = ushort;
  typedef GLprogramcallbackMESA = GL_gl_h_cft_54;
  typedef PFNGLMULTITEXCOORD2IVPROC = GL_gl_h_cft_30;
  typedef PFNGLMULTITEXCOORD1FPROC = GL_gl_h_cft_27;
  typedef PFNGLMULTITEXCOORD3SVPROC = GL_gl_h_cft_32;
  typedef PFNGLMULTITEXCOORD2DVPROC = GL_gl_h_cft_26;
  typedef PFNGLGETCONVOLUTIONPARAMETERIVPROC = GL_gl_h_cft_13;
  typedef PFNGLCONVOLUTIONFILTER1DPROC = GL_gl_h_cft_7;
  typedef GLubyte = utiny;
  typedef PFNGLMULTTRANSPOSEMATRIXDPROC = GL_gl_h_cft_45;
  typedef PFNGLACTIVETEXTUREPROC = GL_gl_h_cft_6;
  typedef GLuint = uint;
  typedef PFNGLMULTITEXCOORD2DARBPROC = GL_gl_h_cft_33;
  typedef GLbitfield = uint;
  typedef PFNGLGETHISTOGRAMPARAMETERFVPROC = GL_gl_h_cft_12;
  typedef PFNGLCOMPRESSEDTEXIMAGE1DPROC = GL_gl_h_cft_49;
  typedef PFNGLMULTTRANSPOSEMATRIXFPROC = GL_gl_h_cft_44;
  typedef PFNGLMULTITEXCOORD4SPROC = GL_gl_h_cft_43;
  typedef PFNGLMULTITEXCOORD3IVPROC = GL_gl_h_cft_30;
  typedef GLclampd = double;
  typedef PFNGLMULTITEXCOORD3SVARBPROC = GL_gl_h_cft_32;
  typedef PFNGLLOADTRANSPOSEMATRIXDPROC = GL_gl_h_cft_45;
  typedef PFNGLMULTITEXCOORD4SVPROC = GL_gl_h_cft_32;
  typedef PFNGLCOLORTABLEPROC = GL_gl_h_cft_7;
  typedef GLbyte = tiny;
  typedef PFNGLMULTITEXCOORD3DVPROC = GL_gl_h_cft_26;
  typedef PFNGLGETMINMAXPARAMETERIVPROC = GL_gl_h_cft_13;
  typedef GLclampf = float;
  typedef PFNGLMULTITEXCOORD3IVARBPROC = GL_gl_h_cft_30;
  typedef PFNGLMULTITEXCOORD3DVARBPROC = GL_gl_h_cft_26;
  typedef PFNGLLOADTRANSPOSEMATRIXFPROC = GL_gl_h_cft_44;
  typedef PFNGLMULTITEXCOORD3IPROC = GL_gl_h_cft_39;
  typedef PFNGLMULTITEXCOORD4SARBPROC = GL_gl_h_cft_43;
  typedef PFNGLMULTITEXCOORD2SARBPROC = GL_gl_h_cft_36;
  typedef PFNGLCONVOLUTIONPARAMETERIVPROC = GL_gl_h_cft_9;
  typedef PFNGLGETCOLORTABLEPARAMETERIVPROC = GL_gl_h_cft_13;
  typedef PFNGLMULTITEXCOORD4IVPROC = GL_gl_h_cft_30;
  typedef PFNGLBLENDCOLORPROC = GL_gl_h_cft_5;
  typedef GLboolean = utiny;
  typedef PFNGLMULTITEXCOORD1SVARBPROC = GL_gl_h_cft_32;
  typedef PFNGLMULTITEXCOORD1FARBPROC = GL_gl_h_cft_27;
  typedef PFNGLMULTITEXCOORD4IARBPROC = GL_gl_h_cft_15;
  typedef PFNGLMULTITEXCOORD4DVPROC = GL_gl_h_cft_26;
  typedef PFNGLMULTITEXCOORD1IVARBPROC = GL_gl_h_cft_30;
  typedef PFNGLMULTITEXCOORD1IARBPROC = GL_gl_h_cft_29;
  typedef PFNGLMULTITEXCOORD1DVARBPROC = GL_gl_h_cft_26;
  typedef PFNGLCOLORTABLEPARAMETERFVPROC = GL_gl_h_cft_8;
  typedef PFNGLMULTITEXCOORD3SPROC = GL_gl_h_cft_40;
  typedef PFNGLMINMAXPROC = GL_gl_h_cft_24;
  typedef PFNGLDRAWRANGEELEMENTSPROC = GL_gl_h_cft_1;
  typedef PFNGLCOLORSUBTABLEPROC = GL_gl_h_cft_14;
  typedef PFNGLCOPYCOLORTABLEPROC = GL_gl_h_cft_10;
  typedef PFNGLMULTITEXCOORD2IPROC = GL_gl_h_cft_35;
  typedef PFNGLMULTITEXCOORD4DPROC = GL_gl_h_cft_41;
  typedef PFNGLHISTOGRAMPROC = GL_gl_h_cft_23;
  typedef PFNGLGETCOMPRESSEDTEXIMAGEPROC = GL_gl_h_cft_53;
  typedef PFNGLMULTITEXCOORD4FPROC = GL_gl_h_cft_42;
  typedef PFNGLCONVOLUTIONPARAMETERFPROC = GL_gl_h_cft_17;
  typedef PFNGLMULTITEXCOORD4SVARBPROC = GL_gl_h_cft_32;
  typedef PFNGLMULTITEXCOORD3DARBPROC = GL_gl_h_cft_37;
  typedef PFNGLCLIENTACTIVETEXTUREARBPROC = GL_gl_h_cft_6;
  typedef PFNGLMULTITEXCOORD4IVARBPROC = GL_gl_h_cft_30;
  typedef PFNGLMULTITEXCOORD4FVARBPROC = GL_gl_h_cft_28;
  typedef PFNGLMULTITEXCOORD4DVARBPROC = GL_gl_h_cft_26;
  typedef PFNGLSEPARABLEFILTER2DPROC = GL_gl_h_cft_21;
  typedef PFNGLSAMPLECOVERAGEPROC = GL_gl_h_cft_46;
  typedef PFNGLGETHISTOGRAMPARAMETERIVPROC = GL_gl_h_cft_13;
  typedef PFNGLMULTITEXCOORD2SVARBPROC = GL_gl_h_cft_32;
  typedef PFNGLTEXSUBIMAGE3DPROC = GL_gl_h_cft_3;
  typedef PFNGLMULTITEXCOORD2IVARBPROC = GL_gl_h_cft_30;
  typedef PFNGLMULTITEXCOORD2SPROC = GL_gl_h_cft_36;
  typedef PFNGLMULTITEXCOORD2FVARBPROC = GL_gl_h_cft_28;
  typedef PFNGLMULTITEXCOORD2DVARBPROC = GL_gl_h_cft_26;
  typedef PFNGLMULTITEXCOORD4FARBPROC = GL_gl_h_cft_42;
  typedef PFNGLMULTITEXCOORD2FARBPROC = GL_gl_h_cft_34;
  typedef PFNGLCOPYCONVOLUTIONFILTER2DPROC = GL_gl_h_cft_19;
  typedef PFNGLMULTITEXCOORD2IARBPROC = GL_gl_h_cft_35;
  typedef PFNGLMULTITEXCOORD1FVPROC = GL_gl_h_cft_28;
  typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = GL_gl_h_cft_50;
  typedef PFNGLMULTITEXCOORD1IPROC = GL_gl_h_cft_29;
  typedef PFNGLMULTITEXCOORD3DPROC = GL_gl_h_cft_37;
  typedef GLenum = uint;
  typedef PFNGLMULTITEXCOORD3FPROC = GL_gl_h_cft_38;
  typedef PFNGLMULTITEXCOORD2FVPROC = GL_gl_h_cft_28;
  typedef GLfloat = float;
  typedef PFNGLCLIENTACTIVETEXTUREPROC = GL_gl_h_cft_6;
  typedef PFNGLCOLORTABLEPARAMETERIVPROC = GL_gl_h_cft_9;
  typedef PFNGLGETCONVOLUTIONPARAMETERFVPROC = GL_gl_h_cft_12;
  typedef PFNGLBLENDEQUATIONPROC = GL_gl_h_cft_6;
  typedef PFNGLCOMPRESSEDTEXIMAGE3DPROC = GL_gl_h_cft_47;
  typedef PFNGLCOPYCOLORSUBTABLEPROC = GL_gl_h_cft_15;
  typedef PFNGLGETCOLORTABLEPROC = GL_gl_h_cft_11;
  typedef PFNGLRESETHISTOGRAMPROC = GL_gl_h_cft_6;
  typedef PFNGLTEXIMAGE3DPROC = GL_gl_h_cft_2;
  typedef PFNGLMULTITEXCOORD3FVPROC = GL_gl_h_cft_28;
  typedef PFNGLMULTITEXCOORD1SPROC = GL_gl_h_cft_31;
  typedef PFNGLACTIVETEXTUREARBPROC = GL_gl_h_cft_6;
  typedef PFNGLMULTITEXCOORD4DARBPROC = GL_gl_h_cft_41;
  typedef PFNGLCOPYCONVOLUTIONFILTER1DPROC = GL_gl_h_cft_10;
  typedef PFNGLMULTITEXCOORD1DARBPROC = GL_gl_h_cft_25;
  typedef PFNGLGETMINMAXPARAMETERFVPROC = GL_gl_h_cft_12;
  typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = GL_gl_h_cft_51;
  typedef PFNGLBLENDEQUATIONSEPARATEATIPROC = GL_gl_h_cft_55;
  typedef PFNGLMULTITEXCOORD2DPROC = GL_gl_h_cft_33;
  typedef PFNGLCONVOLUTIONPARAMETERFVPROC = GL_gl_h_cft_8;

  //PROCEDURES
  proc glAccum: uint * float;
  proc glActiveTexture: uint;
  proc glActiveTextureARB: uint;
  proc glAlphaFunc: uint * float;
  proc glArrayElement: int;
  proc glBegin: uint;
  proc glBindTexture: uint * uint;
  proc glBitmap: int * int * float * float * float * float * &utiny;
  proc glBlendColor: float * float * float * float;
  proc glBlendEquation: uint;
  proc glBlendEquationSeparateATI: uint * uint;
  proc glBlendFunc: uint * uint;
  proc glCallList: uint;
  proc glCallLists: int * uint * address;
  proc glClear: uint;
  proc glClearAccum: float * float * float * float;
  proc glClearColor: float * float * float * float;
  proc glClearDepth: double;
  proc glClearIndex: float;
  proc glClearStencil: int;
  proc glClientActiveTexture: uint;
  proc glClientActiveTextureARB: uint;
  proc glClipPlane: uint * &double;
  proc glColor3b: tiny * tiny * tiny;
  proc glColor3bv: &tiny;
  proc glColor3d: double * double * double;
  proc glColor3dv: &double;
  proc glColor3f: float * float * float;
  proc glColor3fv: &float;
  proc glColor3i: int * int * int;
  proc glColor3iv: &int;
  proc glColor3s: short * short * short;
  proc glColor3sv: &short;
  proc glColor3ub: utiny * utiny * utiny;
  proc glColor3ubv: &utiny;
  proc glColor3ui: uint * uint * uint;
  proc glColor3uiv: &uint;
  proc glColor3us: ushort * ushort * ushort;
  proc glColor3usv: &ushort;
  proc glColor4b: tiny * tiny * tiny * tiny;
  proc glColor4bv: &tiny;
  proc glColor4d: double * double * double * double;
  proc glColor4dv: &double;
  proc glColor4f: float * float * float * float;
  proc glColor4fv: &float;
  proc glColor4i: int * int * int * int;
  proc glColor4iv: &int;
  proc glColor4s: short * short * short * short;
  proc glColor4sv: &short;
  proc glColor4ub: utiny * utiny * utiny * utiny;
  proc glColor4ubv: &utiny;
  proc glColor4ui: uint * uint * uint * uint;
  proc glColor4uiv: &uint;
  proc glColor4us: ushort * ushort * ushort * ushort;
  proc glColor4usv: &ushort;
  proc glColorMask: utiny * utiny * utiny * utiny;
  proc glColorMaterial: uint * uint;
  proc glColorPointer: int * uint * int * address;
  proc glColorSubTable: uint * int * int * uint * uint * address;
  proc glColorTable: uint * uint * int * uint * uint * address;
  proc glColorTableParameterfv: uint * uint * &float;
  proc glColorTableParameteriv: uint * uint * &int;
  proc glCompressedTexImage1D: uint * int * uint * int * int * int * address;
  proc glCompressedTexImage2D: uint * int * uint * int * int * int * int * address;
  proc glCompressedTexImage3D: uint * int * uint * int * int * int * int * int * address;
  proc glCompressedTexSubImage1D: uint * int * int * int * uint * int * address;
  proc glCompressedTexSubImage2D: uint * int * int * int * int * int * uint * int * address;
  proc glCompressedTexSubImage3D: uint * int * int * int * int * int * int * int * uint * int * address;
  proc glConvolutionFilter1D: uint * uint * int * uint * uint * address;
  proc glConvolutionFilter2D: uint * uint * int * int * uint * uint * address;
  proc glConvolutionParameterf: uint * uint * float;
  proc glConvolutionParameterfv: uint * uint * &float;
  proc glConvolutionParameteri: uint * uint * int;
  proc glConvolutionParameteriv: uint * uint * &int;
  proc glCopyColorSubTable: uint * int * int * int * int;
  proc glCopyColorTable: uint * uint * int * int * int;
  proc glCopyConvolutionFilter1D: uint * uint * int * int * int;
  proc glCopyConvolutionFilter2D: uint * uint * int * int * int * int;
  proc glCopyPixels: int * int * int * int * uint;
  proc glCopyTexImage1D: uint * int * uint * int * int * int * int;
  proc glCopyTexImage2D: uint * int * uint * int * int * int * int * int;
  proc glCopyTexSubImage1D: uint * int * int * int * int * int;
  proc glCopyTexSubImage2D: uint * int * int * int * int * int * int * int;
  proc glCopyTexSubImage3D: uint * int * int * int * int * int * int * int * int;
  proc glCullFace: uint;
  proc glDeleteLists: uint * int;
  proc glDeleteTextures: int * &uint;
  proc glDepthFunc: uint;
  proc glDepthMask: utiny;
  proc glDepthRange: double * double;
  proc glDisable: uint;
  proc glDisableClientState: uint;
  proc glDisableTraceMESA: uint;
  proc glDrawArrays: uint * int * int;
  proc glDrawBuffer: uint;
  proc glDrawElements: uint * int * uint * address;
  proc glDrawPixels: int * int * uint * uint * address;
  proc glDrawRangeElements: uint * uint * uint * int * uint * address;
  proc glEdgeFlag: utiny;
  proc glEdgeFlagPointer: int * address;
  proc glEdgeFlagv: &utiny;
  proc glEnable: uint;
  proc glEnableClientState: uint;
  proc glEnableTraceMESA: uint;
  proc glEnd: 1;
  proc glEndList: 1;
  proc glEndTraceMESA: 1;
  proc glEvalCoord1d: double;
  proc glEvalCoord1dv: &double;
  proc glEvalCoord1f: float;
  proc glEvalCoord1fv: &float;
  proc glEvalCoord2d: double * double;
  proc glEvalCoord2dv: &double;
  proc glEvalCoord2f: float * float;
  proc glEvalCoord2fv: &float;
  proc glEvalMesh1: uint * int * int;
  proc glEvalMesh2: uint * int * int * int * int;
  proc glEvalPoint1: int;
  proc glEvalPoint2: int * int;
  proc glFeedbackBuffer: int * uint * &float;
  proc glFinish: 1;
  proc glFlush: 1;
  proc glFogf: uint * float;
  proc glFogfv: uint * &float;
  proc glFogi: uint * int;
  proc glFogiv: uint * &int;
  proc glFrontFace: uint;
  proc glFrustum: double * double * double * double * double * double;
  proc glGenTextures: int * &uint;
  proc glGetBooleanv: uint * &utiny;
  proc glGetClipPlane: uint * &double;
  proc glGetColorTable: uint * uint * uint * &GLvoid;
  proc glGetColorTableParameterfv: uint * uint * &float;
  proc glGetColorTableParameteriv: uint * uint * &int;
  proc glGetCompressedTexImage: uint * int * &GLvoid;
  proc glGetConvolutionFilter: uint * uint * uint * &GLvoid;
  proc glGetConvolutionParameterfv: uint * uint * &float;
  proc glGetConvolutionParameteriv: uint * uint * &int;
  proc glGetDoublev: uint * &double;
  proc glGetFloatv: uint * &float;
  proc glGetHistogram: uint * utiny * uint * uint * &GLvoid;
  proc glGetHistogramParameterfv: uint * uint * &float;
  proc glGetHistogramParameteriv: uint * uint * &int;
  proc glGetIntegerv: uint * &int;
  proc glGetLightfv: uint * uint * &float;
  proc glGetLightiv: uint * uint * &int;
  proc glGetMapdv: uint * uint * &double;
  proc glGetMapfv: uint * uint * &float;
  proc glGetMapiv: uint * uint * &int;
  proc glGetMaterialfv: uint * uint * &float;
  proc glGetMaterialiv: uint * uint * &int;
  proc glGetMinmax: uint * utiny * uint * uint * &GLvoid;
  proc glGetMinmaxParameterfv: uint * uint * &float;
  proc glGetMinmaxParameteriv: uint * uint * &int;
  proc glGetPixelMapfv: uint * &float;
  proc glGetPixelMapuiv: uint * &uint;
  proc glGetPixelMapusv: uint * &ushort;
  proc glGetPointerv: uint * &&GLvoid;
  proc glGetPolygonStipple: &utiny;
  proc glGetProgramRegisterfvMESA: uint * int * &utiny * &float;
  proc glGetSeparableFilter: uint * uint * uint * &GLvoid * &GLvoid * &GLvoid;
  proc glGetTexEnvfv: uint * uint * &float;
  proc glGetTexEnviv: uint * uint * &int;
  proc glGetTexGendv: uint * uint * &double;
  proc glGetTexGenfv: uint * uint * &float;
  proc glGetTexGeniv: uint * uint * &int;
  proc glGetTexImage: uint * int * uint * uint * &GLvoid;
  proc glGetTexLevelParameterfv: uint * int * uint * &float;
  proc glGetTexLevelParameteriv: uint * int * uint * &int;
  proc glGetTexParameterfv: uint * uint * &float;
  proc glGetTexParameteriv: uint * uint * &int;
  proc glHint: uint * uint;
  proc glHistogram: uint * int * uint * utiny;
  proc glIndexMask: uint;
  proc glIndexPointer: uint * int * address;
  proc glIndexd: double;
  proc glIndexdv: &double;
  proc glIndexf: float;
  proc glIndexfv: &float;
  proc glIndexi: int;
  proc glIndexiv: &int;
  proc glIndexs: short;
  proc glIndexsv: &short;
  proc glIndexub: utiny;
  proc glIndexubv: &utiny;
  proc glInitNames: 1;
  proc glInterleavedArrays: uint * int * address;
  proc glLightModelf: uint * float;
  proc glLightModelfv: uint * &float;
  proc glLightModeli: uint * int;
  proc glLightModeliv: uint * &int;
  proc glLightf: uint * uint * float;
  proc glLightfv: uint * uint * &float;
  proc glLighti: uint * uint * int;
  proc glLightiv: uint * uint * &int;
  proc glLineStipple: int * ushort;
  proc glLineWidth: float;
  proc glListBase: uint;
  proc glLoadIdentity: 1;
  proc glLoadMatrixd: &double;
  proc glLoadMatrixf: &float;
  proc glLoadName: uint;
  proc glLoadTransposeMatrixd: &double;
  proc glLoadTransposeMatrixf: &float;
  proc glLogicOp: uint;
  proc glMap1d: uint * double * double * int * int * &double;
  proc glMap1f: uint * float * float * int * int * &float;
  proc glMap2d: uint * double * double * int * int * double * double * int * int * &double;
  proc glMap2f: uint * float * float * int * int * float * float * int * int * &float;
  proc glMapGrid1d: int * double * double;
  proc glMapGrid1f: int * float * float;
  proc glMapGrid2d: int * double * double * int * double * double;
  proc glMapGrid2f: int * float * float * int * float * float;
  proc glMaterialf: uint * uint * float;
  proc glMaterialfv: uint * uint * &float;
  proc glMateriali: uint * uint * int;
  proc glMaterialiv: uint * uint * &int;
  proc glMatrixMode: uint;
  proc glMinmax: uint * uint * utiny;
  proc glMultMatrixd: &double;
  proc glMultMatrixf: &float;
  proc glMultTransposeMatrixd: &double;
  proc glMultTransposeMatrixf: &float;
  proc glMultiTexCoord1d: uint * double;
  proc glMultiTexCoord1dARB: uint * double;
  proc glMultiTexCoord1dv: uint * &double;
  proc glMultiTexCoord1dvARB: uint * &double;
  proc glMultiTexCoord1f: uint * float;
  proc glMultiTexCoord1fARB: uint * float;
  proc glMultiTexCoord1fv: uint * &float;
  proc glMultiTexCoord1fvARB: uint * &float;
  proc glMultiTexCoord1i: uint * int;
  proc glMultiTexCoord1iARB: uint * int;
  proc glMultiTexCoord1iv: uint * &int;
  proc glMultiTexCoord1ivARB: uint * &int;
  proc glMultiTexCoord1s: uint * short;
  proc glMultiTexCoord1sARB: uint * short;
  proc glMultiTexCoord1sv: uint * &short;
  proc glMultiTexCoord1svARB: uint * &short;
  proc glMultiTexCoord2d: uint * double * double;
  proc glMultiTexCoord2dARB: uint * double * double;
  proc glMultiTexCoord2dv: uint * &double;
  proc glMultiTexCoord2dvARB: uint * &double;
  proc glMultiTexCoord2f: uint * float * float;
  proc glMultiTexCoord2fARB: uint * float * float;
  proc glMultiTexCoord2fv: uint * &float;
  proc glMultiTexCoord2fvARB: uint * &float;
  proc glMultiTexCoord2i: uint * int * int;
  proc glMultiTexCoord2iARB: uint * int * int;
  proc glMultiTexCoord2iv: uint * &int;
  proc glMultiTexCoord2ivARB: uint * &int;
  proc glMultiTexCoord2s: uint * short * short;
  proc glMultiTexCoord2sARB: uint * short * short;
  proc glMultiTexCoord2sv: uint * &short;
  proc glMultiTexCoord2svARB: uint * &short;
  proc glMultiTexCoord3d: uint * double * double * double;
  proc glMultiTexCoord3dARB: uint * double * double * double;
  proc glMultiTexCoord3dv: uint * &double;
  proc glMultiTexCoord3dvARB: uint * &double;
  proc glMultiTexCoord3f: uint * float * float * float;
  proc glMultiTexCoord3fARB: uint * float * float * float;
  proc glMultiTexCoord3fv: uint * &float;
  proc glMultiTexCoord3fvARB: uint * &float;
  proc glMultiTexCoord3i: uint * int * int * int;
  proc glMultiTexCoord3iARB: uint * int * int * int;
  proc glMultiTexCoord3iv: uint * &int;
  proc glMultiTexCoord3ivARB: uint * &int;
  proc glMultiTexCoord3s: uint * short * short * short;
  proc glMultiTexCoord3sARB: uint * short * short * short;
  proc glMultiTexCoord3sv: uint * &short;
  proc glMultiTexCoord3svARB: uint * &short;
  proc glMultiTexCoord4d: uint * double * double * double * double;
  proc glMultiTexCoord4dARB: uint * double * double * double * double;
  proc glMultiTexCoord4dv: uint * &double;
  proc glMultiTexCoord4dvARB: uint * &double;
  proc glMultiTexCoord4f: uint * float * float * float * float;
  proc glMultiTexCoord4fARB: uint * float * float * float * float;
  proc glMultiTexCoord4fv: uint * &float;
  proc glMultiTexCoord4fvARB: uint * &float;
  proc glMultiTexCoord4i: uint * int * int * int * int;
  proc glMultiTexCoord4iARB: uint * int * int * int * int;
  proc glMultiTexCoord4iv: uint * &int;
  proc glMultiTexCoord4ivARB: uint * &int;
  proc glMultiTexCoord4s: uint * short * short * short * short;
  proc glMultiTexCoord4sARB: uint * short * short * short * short;
  proc glMultiTexCoord4sv: uint * &short;
  proc glMultiTexCoord4svARB: uint * &short;
  proc glNewList: uint * uint;
  proc glNewTraceMESA: uint * &utiny;
  proc glNormal3b: tiny * tiny * tiny;
  proc glNormal3bv: &tiny;
  proc glNormal3d: double * double * double;
  proc glNormal3dv: &double;
  proc glNormal3f: float * float * float;
  proc glNormal3fv: &float;
  proc glNormal3i: int * int * int;
  proc glNormal3iv: &int;
  proc glNormal3s: short * short * short;
  proc glNormal3sv: &short;
  proc glNormalPointer: uint * int * address;
  proc glOrtho: double * double * double * double * double * double;
  proc glPassThrough: float;
  proc glPixelMapfv: uint * int * &float;
  proc glPixelMapuiv: uint * int * &uint;
  proc glPixelMapusv: uint * int * &ushort;
  proc glPixelStoref: uint * float;
  proc glPixelStorei: uint * int;
  proc glPixelTransferf: uint * float;
  proc glPixelTransferi: uint * int;
  proc glPixelZoom: float * float;
  proc glPointSize: float;
  proc glPolygonMode: uint * uint;
  proc glPolygonOffset: float * float;
  proc glPolygonStipple: &utiny;
  proc glPopAttrib: 1;
  proc glPopClientAttrib: 1;
  proc glPopMatrix: 1;
  proc glPopName: 1;
  proc glPrioritizeTextures: int * &uint * &float;
  proc glProgramCallbackMESA: uint * GL_gl_h_cft_54 * &GLvoid;
  proc glPushAttrib: uint;
  proc glPushClientAttrib: uint;
  proc glPushMatrix: 1;
  proc glPushName: uint;
  proc glRasterPos2d: double * double;
  proc glRasterPos2dv: &double;
  proc glRasterPos2f: float * float;
  proc glRasterPos2fv: &float;
  proc glRasterPos2i: int * int;
  proc glRasterPos2iv: &int;
  proc glRasterPos2s: short * short;
  proc glRasterPos2sv: &short;
  proc glRasterPos3d: double * double * double;
  proc glRasterPos3dv: &double;
  proc glRasterPos3f: float * float * float;
  proc glRasterPos3fv: &float;
  proc glRasterPos3i: int * int * int;
  proc glRasterPos3iv: &int;
  proc glRasterPos3s: short * short * short;
  proc glRasterPos3sv: &short;
  proc glRasterPos4d: double * double * double * double;
  proc glRasterPos4dv: &double;
  proc glRasterPos4f: float * float * float * float;
  proc glRasterPos4fv: &float;
  proc glRasterPos4i: int * int * int * int;
  proc glRasterPos4iv: &int;
  proc glRasterPos4s: short * short * short * short;
  proc glRasterPos4sv: &short;
  proc glReadBuffer: uint;
  proc glReadPixels: int * int * int * int * uint * uint * &GLvoid;
  proc glRectd: double * double * double * double;
  proc glRectdv: &double * &double;
  proc glRectf: float * float * float * float;
  proc glRectfv: &float * &float;
  proc glRecti: int * int * int * int;
  proc glRectiv: &int * &int;
  proc glRects: short * short * short * short;
  proc glRectsv: &short * &short;
  proc glResetHistogram: uint;
  proc glResetMinmax: uint;
  proc glRotated: double * double * double * double;
  proc glRotatef: float * float * float * float;
  proc glSampleCoverage: float * utiny;
  proc glScaled: double * double * double;
  proc glScalef: float * float * float;
  proc glScissor: int * int * int * int;
  proc glSelectBuffer: int * &uint;
  proc glSeparableFilter2D: uint * uint * int * int * uint * uint * address * address;
  proc glShadeModel: uint;
  proc glStencilFunc: uint * int * uint;
  proc glStencilMask: uint;
  proc glStencilOp: uint * uint * uint;
  proc glTexCoord1d: double;
  proc glTexCoord1dv: &double;
  proc glTexCoord1f: float;
  proc glTexCoord1fv: &float;
  proc glTexCoord1i: int;
  proc glTexCoord1iv: &int;
  proc glTexCoord1s: short;
  proc glTexCoord1sv: &short;
  proc glTexCoord2d: double * double;
  proc glTexCoord2dv: &double;
  proc glTexCoord2f: float * float;
  proc glTexCoord2fv: &float;
  proc glTexCoord2i: int * int;
  proc glTexCoord2iv: &int;
  proc glTexCoord2s: short * short;
  proc glTexCoord2sv: &short;
  proc glTexCoord3d: double * double * double;
  proc glTexCoord3dv: &double;
  proc glTexCoord3f: float * float * float;
  proc glTexCoord3fv: &float;
  proc glTexCoord3i: int * int * int;
  proc glTexCoord3iv: &int;
  proc glTexCoord3s: short * short * short;
  proc glTexCoord3sv: &short;
  proc glTexCoord4d: double * double * double * double;
  proc glTexCoord4dv: &double;
  proc glTexCoord4f: float * float * float * float;
  proc glTexCoord4fv: &float;
  proc glTexCoord4i: int * int * int * int;
  proc glTexCoord4iv: &int;
  proc glTexCoord4s: short * short * short * short;
  proc glTexCoord4sv: &short;
  proc glTexCoordPointer: int * uint * int * address;
  proc glTexEnvf: uint * uint * float;
  proc glTexEnvfv: uint * uint * &float;
  proc glTexEnvi: uint * uint * int;
  proc glTexEnviv: uint * uint * &int;
  proc glTexGend: uint * uint * double;
  proc glTexGendv: uint * uint * &double;
  proc glTexGenf: uint * uint * float;
  proc glTexGenfv: uint * uint * &float;
  proc glTexGeni: uint * uint * int;
  proc glTexGeniv: uint * uint * &int;
  proc glTexImage1D: uint * int * int * int * int * uint * uint * address;
  proc glTexImage2D: uint * int * int * int * int * int * uint * uint * address;
  proc glTexImage3D: uint * int * int * int * int * int * int * uint * uint * address;
  proc glTexParameterf: uint * uint * float;
  proc glTexParameterfv: uint * uint * &float;
  proc glTexParameteri: uint * uint * int;
  proc glTexParameteriv: uint * uint * &int;
  proc glTexSubImage1D: uint * int * int * int * uint * uint * address;
  proc glTexSubImage2D: uint * int * int * int * int * int * uint * uint * address;
  proc glTexSubImage3D: uint * int * int * int * int * int * int * int * uint * uint * address;
  proc glTraceAssertAttribMESA: uint;
  proc glTraceCommentMESA: &utiny;
  proc glTraceListMESA: uint * &utiny;
  proc glTracePointerMESA: &GLvoid * &utiny;
  proc glTracePointerRangeMESA: address * address * &utiny;
  proc glTraceTextureMESA: uint * &utiny;
  proc glTranslated: double * double * double;
  proc glTranslatef: float * float * float;
  proc glVertex2d: double * double;
  proc glVertex2dv: &double;
  proc glVertex2f: float * float;
  proc glVertex2fv: &float;
  proc glVertex2i: int * int;
  proc glVertex2iv: &int;
  proc glVertex2s: short * short;
  proc glVertex2sv: &short;
  proc glVertex3d: double * double * double;
  proc glVertex3dv: &double;
  proc glVertex3f: float * float * float;
  proc glVertex3fv: &float;
  proc glVertex3i: int * int * int;
  proc glVertex3iv: &int;
  proc glVertex3s: short * short * short;
  proc glVertex3sv: &short;
  proc glVertex4d: double * double * double * double;
  proc glVertex4dv: &double;
  proc glVertex4f: float * float * float * float;
  proc glVertex4fv: &float;
  proc glVertex4i: int * int * int * int;
  proc glVertex4iv: &int;
  proc glVertex4s: short * short * short * short;
  proc glVertex4sv: &short;
  proc glVertexPointer: int * uint * int * address;
  proc glViewport: int * int * int * int;

  //FUNCTIONS
  fun glAreTexturesResident: int * &uint * &utiny -> utiny;
  fun glGenLists: int -> uint;
  fun glGetError: 1 -> uint;
  fun glGetString: uint -> &utiny;
  fun glIsEnabled: uint -> utiny;
  fun glIsList: uint -> utiny;
  fun glIsTexture: uint -> utiny;
  fun glRenderMode: uint -> int;
}
